DESCRIPTION

Occam3 is an application and framework which implements
reconstructability analysis (RA).  See documents in the
doc directory for more information.



FILES


===============================
||  Misc. Files              ||
===============================

crashtest.sh
	Shell script to read some sort of log for crashtesting. (?)
	
doc/
	documentation
	
examples/
	example files
	
header.txt
	Header information for text pages, used by weboccam.py.
	
install/
	A complete installation of occam.
	
liboccam3.a
	Used by Makefile to collect all object (.o) files after compilation. 

Makefile
	Instructions for the "make" command to compile the Occam project.
	
occam.so
	Collection of binaries, aggregated by the Makefile.
	
occam3
	Shell script to run Occam from the command line.
	
occambatch
	Shell script to run a batch job.  Called from weboccam.py.

README
	[This file.] Contains a description of the files in this directory.
	
readme.txt
	Description of the objects in Occam.
	
TO-DO
	A list of tasks to be completed
	


===============================
||  Web Files                ||
===============================

base.css
	CSS Stylesheet for the HTML pages.
	
fitform.html
	Template for the "Do Fit" page.
	
header.html
	Template for the header of HTML pages created by weboccam.py.
	
index.html
	Index of the site.
	
logform.html
	Template for "Show Log" page.
	
SBfitform.html
	Template for the "Do State Based Fit" page.
	
searchform.html
	Template for the "Do Search" page.
	
switchform.html
	Template for page-selection form in the header of each page.
	
weboccam.cgi
	CGI stub to run weboccam.py
	
	

===============================
||  Python Files             ||
===============================

basic.py
	Default script used by command-line version of Occam.
	
bp.py
	An alternate version of basic.py. (?)

fit.py
	A command-line script to do "fit."

jobcontrol.py
	Job control python code, used for the "Manage Jobs" page.
	
occammail.py
	Python script to send Occam's output in an email.

ocutils.py
	Utility scripts for common operations.
	
OpagCGI.py
	Provides the "OpagCGI" object used by weboccam.py to build pages with 
	different templates.
	
weboccam.py
	Main Python code.  This code presents the site's pages based on the HTML
	templates, and also passes form data through the function wrappers in
	pyoccam.cpp to the C++ code.



===============================
||  C++ Files                ||
===============================

ocAttributeList.cpp
	Implements the ocAttributeList class.
	- size()
	- reset()
	- setAttribute()
	- getAttribute()
	- getAttributeIndex()
	- getAttributeCount()
	- getAttributeByIndex()
	- dump()

_ocCore.cpp
_ocCore.h
	[I'm not sure why these functions are here instead of elsewhere. jsf]
	- growStorage()
	- ocCompareVariables()
	- ocContainsVariables()

ocCore.h
	Contains declarations for various classes defined in separate files:
	+ ocTable
	+ ocKey
	+ ocVariable
	+ ocVariableList
	+ ocRelation
	+ ocModel
	+ ocAttributeList
	+ ocStateConstraint

ocInput.cpp
ocInput.h
	Provides functions for managing input data.
	- ocReadFile()

ocKey.cpp
	Implements the ocKey class.  The class contains only static functions,
	for key manipulation.
	- buildKey()
	- buildFullKey()
	- setKeyValue()
	- getKeyValue()
	- compareKeys()
	- copyKey()
	- buildMask()
	- keyToString()
	- keyToUserString()
	- getSiblings()

ocManagerBase.cpp
ocManagerBase.h
	Implements base functionality of an ocManager.  This class is the provider
	for algorithms which manipulate core objects.  The class is extensible, to
	allow new managers to be developed for different analysis approaches.
	- initFromCommandLine()
	- getRelation()
	- getChildRelation()
	- makeProjection()
	- makeMaxProjection()
	- makeProjections()
	- deleteTableFromCache()
	- makeFitTable()
	- expandTuple()
	- makeOrthoExpansion()
	- doIntersectionProcessing()
	- DFAndEntropy()
	- hasLoops()
	- computeDF()
	- computeH()
	- computeTransmission()
	- computeStatistics()
	- computeRelWidth()
	- compute_SB_DF()
	- getKeySize()
	- getSampleSz()
	- getVariableList()
	- getRelCache()
	- getModelCache()
	- getInputData()
	- getTestData()
	- makeModel()
	- makeSbModel()
	- setOptionString()
	- setOptionFloat()
	- getOptionString()
	- getOptionFloat()
	- printOptions()
	- getFitTable()
	- calc_StateConst_sz()
	- addConstraint()
	- makeStateSpaceArr()
	- printSizes()
	- dumpRelations()

ocMath.cpp
ocMath.h
	Contains functions for common mathematical operations, where the input
	data is taken from ocCore data structures (typically tables).
	- ocEntropy()
	- ocTransmission()
	- ocPearsonChiSquared()
	- ocHasOverlaps()
	- ocHasLoops()
	- ocDegreesOfFreedom()
	- ocSB_DF() - state-based degrees of freedom
	- ocLR() - likelihood ratio
	- chic()
	- chin2()
	- csa()
	- ppnorm()
	- gammds()
	- ppchi()
	- anorm()
	- chistat()

ocModel.cpp
	Implements the ocModel class.  This represents a model, which is a set of
	relations (and optionally the set of tables implementing those relations).
	The model can also store a computed table, which is the fitted table to the
	source data (e.g., computed via IPF).
	- size()
	- addRelation()
	- getRelations()
	- getRelation()
	- getRelationCount()
	- getFitTable()
	- setFitTable()
	- deleteFitTable()
	- deleteRelationsLinks()
	- copyRelations()
	- getAttributeList()
	- getPrintName()
	- getHashNext()
	- setHashNext()
	- dump()
	- makeStructMatrix()
	- get_indicesfromKey()
	- printStructMatrix()
	- get_structMatrix()

ocModelCache.cpp
ocModelCache.h
	Defines the model cache.  This provides a way to reuse model objects.
	The cache matches on the printName for the model, which uniquely identifies
	the set of relations. There must be a separate model cache for each 
	different problem instance.
	- size()
	- addModel()
	- findModel()
	- dump()

ocOptions.cpp
ocOptions.h
	Defines a class which maintains the options specified by the user.
	each option has a name and value. The options table holds all the
	legal options and values, as well as the current options.
	- addOptionName()
	- addOptionValue()
	- findOptionByName()
	- findOptionByAbbrev()
	- setOptions()
	- readOptions()
	- getLine()
	- setOptionString()
	- setOptionFloat()
	- getOptionString()
	- getOptionFloat()
	- write()

ocRelCache.cpp
ocRelCache.h
	Defines the relation cache.  This provides a way to reuse relation objects,
	since once constructed a relation object can be used by any model containing
	that relation. The cache matches on the mask for the relation, which 
	uniquely identifies the set of variables in the relation. There must be a 
	separate relation cache for each different problem instance.
	- size()
	- deleteTables()
	- addRelation()
	- findRelation()
	- dump()

ocRelation.cpp
	Implements the Relation class.  A Relation consists of a list of variables.
	(Actually, a list of indices of variables in a VariableList).
	- size()
	- addVariable()
	- getVariableList()
	- copyVariables()
	- getVariables()
	- getIndependentVariables()
	- getDependentVariables()
	- copyMissingVariables()
	- getVariable()
	- findVariable()
	- getVariableCount()
	- getExpansionSize()
	- setTable()
	- getTable()
	- deleteTable()
	- setStateConstraints()
	- getStateConstraints()
	- compare()
	- contains()
	- isIndOnly()
	- getNC()
	- makeMask()
	- getMask()
	- getKeySize()
	- sort()
	- getHashNext()
	- setHashNext()
	- getAttributeList()
	- getPrintName()
	- getMatchingTupleValue()
	- dump()
	- getStateConstraint()

ocReport.cpp
ocReport.h
	Generate reports from model data. An ocReport object holds a list of models,
	and a list of attributes to print. The collection can be sorted and/or 
	filtered, and the resulting models printed.
	- addModel()
	- setAttributes()
	- sort()
	- print()
	- setSeparator()
	- isHTMLMode()
	- setHTMLMode()
	- printResiduals()
	- printConditional_DV()
	- printConditional_DV_rel()
	

ocSBMManager.cpp
ocSBMManager.h
	The manager class for state-based RA. It inherits from ocManagerBase.
	- initFromCommandLine()
	- makeReferenceModels()
	- getTopRefModel()
	- getBottomRefModel()
	- getRefModel()
	- setRefModel()
	- computeExplainedInformation()
	- computeUnexplainedInformation()
	- computeDDF()
	- setMakeProjection()
	- makeProjection()
	- computeInformationStatistics()
	- computeDFStatistics()
	- computeL2Statistics()
	- computePearsonStatistics()
	- computeDependentStatistics()
	- computeBPStatistics()
	- setFilter()
	- applyFilter()
	- setSortAttr()
	- getSortAttr()
	- setSortDirection()
	- getSortDirection()
	- printFitReport()

ocSearch.cpp
ocSearch.h
	Contains class declarations for basic search algorithms for the LM.
	These classes are all based on ocSearchBase.
	+ ocSearchFullDown
	+ ocSearchFullUp
	+ ocSearchLooplessDown
	+ ocSearchLooplessUp
	+ ocSearchDisjointUp
	+ ocSearchChain

ocSearchBase.cpp
ocSearchBase.h
	Base class for search algorithms. Each search step takes a single model as a
	starting point, and returns a list of models. Some subclasses may have
	control attributes which affect searches.
	- search()
	- isDirected()
	- makeProjection()
	- getManager()

ocStateConstraint.cpp
	Implements a state constraint object, which is a list of variable keys 
	which define certain cells to be constrained. This is used in state-based 
	modeling, to specify in a relation which of the cells have fixed values.
	- addConstraint()
	- getConstraintCount()
	- getConstraint()
	- getKeySize()

ocTable.cpp
	Implements the Table class.  A Table consists logically of a list of tuples.
	In this implementation, the table contains an array of keys (the value part
	of each tuple) and a separate array of values, all indexed by the same index.
	- copy()
	- addTuple()
	- insterTuple()
	- sumTuple()
	- getValue()
	- getKey()
	- copyKey()
	- indexOf()
	- getTupleCount()
	- getKeySize()
	- sort()
	- reset()
	- dump()
	- normalize()
	- getMaxValue()

ocVBMManager.cpp
ocVBMManager.h
	The manager class for variable-based RA. It inherits from ocManagerBase.
	- initFromCommandLine()
	- makeAllChildRelations()
	- makeChildModel()
	- makeReferenceModels()
	- getTopRefModel()
	- getBottomRefModel()
	- getRefModel()
	- setRefModel()
	- computeExplainedInformation()
	- computeUnexplainedInformation()
	- computeDDF()
	- setMakeProjection()
	- makeProjection()
	- getSearch()
	- setSearch()
	- getIndRelation()
	- getDepRelation()
	- computeInformationStatistics()
	- computeDFStatistics()
	- computeL2Statistics()
	- computePearsonStatistics()
	- computeDependentStatistics()
	- computeBPT()
	- computeBPStatistics()	- use the Back Propagation (Fourier) methods
	- computePercentCorrect()
	- setFilter()
	- applyFilter()
	- setSortAttr()
	- getSortAttr()
	- setSortDirection()
	- getSortDirection()
	- printFitReport()
	- printBasicStatistics()
	- getPredictingVars()
	- calculateAicBic()
	- calculateBP_AicBic()

ocVariableList.cpp
	Implements the VariableList class. This holds information about variables
	in a problem, including name, cardinality, and the position of the variable
	value in the tuple key.
	- size()
	- addVariable()
	- getKeySize()
	- getVariable()
	- getVarCount()
	- getVarCountDF()
	- getPrintName()
	- getPrintLength()
	- isDirected()
	- getDV()
	- getVariableList()
	- getVarStateList()
	- getMaxAbbrevLen()
	- getVarValueIndex()
	- getVarValue()
	- checkCardinalities()
	- dump()
	- isVarInUse()
	- markForNoUse()
	- getNewValue()

ocWin32.h
	Some definitions to bridge between gcc and Visual Studio.
	
pyoccam.cpp
	Defines wrapper functions in Python for the following C classes.
	+ ocVBManager
	+ ocSBManager
	+ ocRelation
	+ ocModel
	+ ocReport


